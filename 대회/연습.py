{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unexpected exception formatting exception. Falling back to standard exception\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Traceback (most recent call last):\n",
      "  File \"C:\\Users\\User\\AppData\\Roaming\\Python\\Python310\\site-packages\\IPython\\core\\interactiveshell.py\", line 3398, in run_code\n",
      "    exec(code_obj, self.user_global_ns, self.user_ns)\n",
      "  File \"C:\\Users\\User\\AppData\\Local\\Temp\\ipykernel_166160\\2001025000.py\", line 64, in <cell line: 64>\n",
      "    solution([[1,1,7,4],[3,2,5,5],[4,3,6,9],[2,6,8,8]],1,3,7,8)\n",
      "  File \"C:\\Users\\User\\AppData\\Local\\Temp\\ipykernel_166160\\2001025000.py\", line 62, in solution\n",
      "    return  bfs([characterY,characterX],[itemY,itemX])\n",
      "  File \"C:\\Users\\User\\AppData\\Local\\Temp\\ipykernel_166160\\2001025000.py\", line -1, in bfs\n",
      "KeyboardInterrupt\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"C:\\Users\\User\\AppData\\Roaming\\Python\\Python310\\site-packages\\IPython\\core\\interactiveshell.py\", line 1993, in showtraceback\n",
      "    stb = self.InteractiveTB.structured_traceback(\n",
      "  File \"C:\\Users\\User\\AppData\\Roaming\\Python\\Python310\\site-packages\\IPython\\core\\ultratb.py\", line 1118, in structured_traceback\n",
      "    return FormattedTB.structured_traceback(\n",
      "  File \"C:\\Users\\User\\AppData\\Roaming\\Python\\Python310\\site-packages\\IPython\\core\\ultratb.py\", line 1012, in structured_traceback\n",
      "    return VerboseTB.structured_traceback(\n",
      "  File \"C:\\Users\\User\\AppData\\Roaming\\Python\\Python310\\site-packages\\IPython\\core\\ultratb.py\", line 865, in structured_traceback\n",
      "    formatted_exception = self.format_exception_as_a_whole(etype, evalue, etb, number_of_lines_of_context,\n",
      "  File \"C:\\Users\\User\\AppData\\Roaming\\Python\\Python310\\site-packages\\IPython\\core\\ultratb.py\", line 818, in format_exception_as_a_whole\n",
      "    frames.append(self.format_record(r))\n",
      "  File \"C:\\Users\\User\\AppData\\Roaming\\Python\\Python310\\site-packages\\IPython\\core\\ultratb.py\", line 736, in format_record\n",
      "    result += ''.join(_format_traceback_lines(frame_info.lines, Colors, self.has_colors, lvals))\n",
      "  File \"C:\\Users\\User\\AppData\\Roaming\\Python\\Python310\\site-packages\\stack_data\\utils.py\", line 145, in cached_property_wrapper\n",
      "    value = obj.__dict__[self.func.__name__] = self.func(obj)\n",
      "  File \"C:\\Users\\User\\AppData\\Roaming\\Python\\Python310\\site-packages\\stack_data\\core.py\", line 698, in lines\n",
      "    pieces = self.included_pieces\n",
      "  File \"C:\\Users\\User\\AppData\\Roaming\\Python\\Python310\\site-packages\\stack_data\\utils.py\", line 145, in cached_property_wrapper\n",
      "    value = obj.__dict__[self.func.__name__] = self.func(obj)\n",
      "  File \"C:\\Users\\User\\AppData\\Roaming\\Python\\Python310\\site-packages\\stack_data\\core.py\", line 649, in included_pieces\n",
      "    pos = scope_pieces.index(self.executing_piece)\n",
      "  File \"C:\\Users\\User\\AppData\\Roaming\\Python\\Python310\\site-packages\\stack_data\\utils.py\", line 145, in cached_property_wrapper\n",
      "    value = obj.__dict__[self.func.__name__] = self.func(obj)\n",
      "  File \"C:\\Users\\User\\AppData\\Roaming\\Python\\Python310\\site-packages\\stack_data\\core.py\", line 628, in executing_piece\n",
      "    return only(\n",
      "  File \"C:\\Users\\User\\AppData\\Roaming\\Python\\Python310\\site-packages\\executing\\executing.py\", line 164, in only\n",
      "    raise NotOneValueFound('Expected one value, found 0')\n",
      "executing.executing.NotOneValueFound: Expected one value, found 0\n"
     ]
    }
   ],
   "source": [
    "from collections import deque\n",
    "def solution(rectangle, characterX, characterY, itemX, itemY):\n",
    "    max_x=0\n",
    "    max_y=0\n",
    "    for x1,y1,x2,y2 in rectangle:\n",
    "        max_x=max(max_x,x1,x2)\n",
    "        max_y=max(max_y,y1,y2)\n",
    "    graph=[[0 for _ in range(max_x+2)] for _ in range(max_y+2)]\n",
    "    visited=[[False for _ in range(max_x+2)] for _ in range(max_y+2)]\n",
    "    # 가장 밖에 것을 구하기만 하면 됨.\n",
    "    \n",
    "    for x1,y1,x2,y2 in rectangle:\n",
    "        for i in range(x1,x2+1):\n",
    "            for j in range(y1,y2+1):\n",
    "                graph[j][i]+=1\n",
    "    \n",
    "    def find_out():\n",
    "        queue=deque()\n",
    "        queue.append([0,0])\n",
    "        search=[[-1,0],[1,0],[0,-1],[0,1]]\n",
    "        while queue:\n",
    "            ri,ci=queue.popleft()\n",
    "            for dr,dc in search:\n",
    "                nr=ri+dr\n",
    "                nc=ci+dc\n",
    "                if 0<=nr<max_y+2 and 0<=nc<max_x+2 and not visited[nr][nc]:\n",
    "                    visited[nr][nc]=True\n",
    "                    if graph[nr][nc]:\n",
    "                        graph[nr][nc]=-1\n",
    "                    else:\n",
    "                        queue.append([nr,nc])\n",
    "    find_out()    \n",
    "    \n",
    "    def bfs(start,end):\n",
    "        dist=[[0 for _ in range(max_x+2)] for _ in range(max_y+2)]\n",
    "        r,c=start\n",
    "        dist[r][c]=1\n",
    "        queue=deque()\n",
    "        queue.append(start)\n",
    "        search=[[-1,0],[1,0],[0,-1],[0,1]]\n",
    "        while queue:\n",
    "            ri,ci=queue.popleft()\n",
    "            Flag=False\n",
    "            for dr,dc in search:\n",
    "                nr=ri+dr\n",
    "                nc=ci+dc\n",
    "                if 0<=nr<max_y+2 and 0<=nc<max_x+2 and graph[nr][nc]==-1:\n",
    "                    dist[nr][nc]=dist[ri][ci]+1\n",
    "                    queue.append([nr,nc])\n",
    "                    Flag=True\n",
    "                        \n",
    "            if not Flag:\n",
    "                for dr,dc in search:\n",
    "                    nr=ri+dr\n",
    "                    nc=ci+dc\n",
    "                    if 0<=nr<max_y+2 and 0<=nc<max_x+2 and graph[nr][nc]==2:\n",
    "                        dist[nr][nc]=dist[ri][ci]+1\n",
    "                        queue.append([nr,nc])\n",
    "        er,ec=end\n",
    "        print(*dist,sep=\"\\n\")\n",
    "        return dist[er][ec]\n",
    "    return  bfs([characterY,characterX],[itemY,itemX])\n",
    "\n",
    "solution([[1,1,7,4],[3,2,5,5],[4,3,6,9],[2,6,8,8]],1,3,7,8)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
